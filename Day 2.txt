https://github.com/hbudisan

=== Collections ===

01. Buat folder di labs\02-collections
	- Aktifkan folder tersebut sebagai project folder

02. Buat file labs\02-collections\main.go

	package main

	import "fmt"

	func main() {
		fmt.Println("Collections")
		// Array
		var x [5]int

		x[0] = 100
		x[1] = 101
		x[3] = 103
		x[4] = 104

		fmt.Println(x)

		// Slices
		var s1 []int = x[1:4]
		var s2 []int = x[:4]
		var s3 []int = x[1:]
		var s4 []int = x[:]
		fmt.Println(s1, s2, s3, s4)

		// map
		var m = map[string]int{
			"one":   1,
			"two":   2,
			"three": 3,
		}
		fmt.Println(m)

		// Structs
		// Defining Struct Type
		type Person struct {
			FirstName string
			LastName  string
			Age       int
		}

		// Declaring variable of struct type
		p := Person{"James", "Bond", 30}
		fmt.Println(p.FirstName)
		fmt.Println(p)
	}

=== Controlling Program Flow ===

01. Buat folder di labs\03-controlling-program-flow
	- Aktifkan folder tersebut sebagai project folder

02. Buat file labs\03-controlling-program-flow\main.go

	package main

	import "fmt"

	func main() {
		fmt.Println("Controlling Program Flow")

		// if statement
		var x = 25
		if x%5 == 0 {
			fmt.Printf("%d habis dibagi dg 5\n", x)
		}

		// if with a short statement
		if n := 10; n%2 == 0 {
			fmt.Printf("%d merupakan bilangan genap\n", n)
		}

		// if-else statement
		var age = 15
		if age >= 17 {
			fmt.Println("Anda boleh memilih")
		} else {
			fmt.Println("Anda tidak boleh memilih")
		}

		// Switch Statement
		dayOfWeek := 6
		switch dayOfWeek {
		case 1:
			fmt.Println("Senin")
		case 2:
			fmt.Println("Selasa")
		case 3:
			fmt.Println("Rabu")
		case 4:
			fmt.Println("Kamis")
		case 5:
			fmt.Println("Jumat")
		case 6:
			fmt.Println("Sabtu")
			fmt.Println("Weekend")
		case 7:
			fmt.Println("Minggu")
			fmt.Println("Weekend")
		default:
			fmt.Println("Invalid")
		}

		// combine case
		switch dayOfWeek {
		case 1, 2, 3, 4, 5:
			fmt.Println("Weekday")
		case 6, 7:
			fmt.Println("Weekend, yeee...")
		default:
			fmt.Println("Harinya invalid")
		}

		// switch with no expression
		var bmi = 19.0
		switch {
		case bmi < 18.5:
			fmt.Println("Anda kurus kering")
		case bmi >= 18.5 && bmi < 25.5:
			fmt.Println("Berat anda ideal")
		case bmi >= 25.5 && bmi < 30:
			fmt.Println("Anda gendut")
		default:
			fmt.Println("Anda Obesitas")
		}

		// for statement
		for i := 0; i <= 10; i++ {
			fmt.Printf("%d\t", i)
		}

		fmt.Printf("\n")

		// without init statement
		j := 0
		for ; j <= 10; j++ {
			fmt.Printf("%d\t", j)
		}

		fmt.Printf("\n")

		// without increment statement
		// while loop
		k := 0
		for k <= 10 {
			fmt.Printf("%d\t", k)
			k++
		}	
		fmt.Printf("\n")

		// without condition statement
		// infinite loop
		bil := 1
		for {
			if bil%2 == 0 && bil%5 == 0 {
				fmt.Printf("Bilangan yg habis dibagi 2 dan 5 adalah %d", bil)
				break
			}
			bil++
		}	

		fmt.Printf("\n")
		// continue statement
		for num := 0; num < 10; num++ {
			if num%2 == 0 {
				continue
			}
			fmt.Printf("%d\t", num)
		}	
	}

=== Functions and Methods ===

01. Buat folder di labs\04-function
	- Aktifkan folder tersebut sebagai project folder

02. Buat file labs\04-function\main.go

	package main

	import (
		"fmt"
		"math"
	)

	// function declaration
	func avg(x float64, y float64) float64 {
		return (x + y) / 2
	}

	// function with multiple return values
	func getStockPriceChange(prevPrice, currentPrice float64) (change, percentChange float64) {
		change = currentPrice - prevPrice
		percentChange = (change / prevPrice) * 100
		return
	}

	func main() {
		fmt.Println("Functions")

		x := 5.75
		y := 6.25

		result := avg(x, y)
		fmt.Printf("Rata2 dari %.2f dan %.2f = %.2f\n", x, y, result)

		prevStockPrice := 925.0
		currentStockPrice := 825.0

		change, percentChange := getStockPriceChange(prevStockPrice, currentStockPrice)

		if change < 0 {
			fmt.Printf("Harga saham turun sebesar Rp %.2f atau sebesar %.2f%%", math.Abs(change), math.Abs(percentChange))
		} else {
			fmt.Printf("Harga saham naik sebesar Rp %.2f atau sebesar %.2f%%", math.Abs(change), math.Abs(percentChange))
		}
	}

03. Buat folder di labs\05-methods
	- Aktifkan folder tersebut sebagai project folder

04. Buat file labs\05-methods\main.go

	package main

	import "fmt"

	// Struct Type : Point
	type Point struct {
		X, Y float64
	}

	// Method with Receiver `Point`
	func (p Point) IsAbove(y float64) bool {
		return p.Y > y
	}

	// Method diubah jadi function
	func IsAbove(p Point, y float64) bool {
		return p.Y > y
	}

	func main() {
		p := Point{2.0, 4.0}
		fmt.Println("Point ", p)

		fmt.Println("Apakah Point p terletak diatas garis y = 1.0 ", p.IsAbove(1.0))
		fmt.Println("Apakah Point p terletak diatas garis y = 1.0 ", IsAbove(p, 1.0))
	}

05. Buat folder di labs\06-interface
	- Aktifkan folder tersebut sebagai project folder

06. Buat file labs\06-interface\main.go

	package main

	import (
		"fmt"
		"math"
	)

	// Interface - `Shape`
	type Shape interface {
		Area() float64
		Perimeter() float64
	}

	// Struct type `Rectangle` - yg akan implement interface `Shape`
	type Rectangle struct {
		Length, Width float64
	}

	func (r Rectangle) Area() float64 {
		return r.Length * r.Width
	}

	func (r Rectangle) Perimeter() float64 {
		return 2 * (r.Length + r.Width)
	}

	// Struct type `Circle` - yg akan implement interface `Shape`
	type Circle struct {
		Radius float64
	}

	func (c Circle) Area() float64 {
		return math.Pi * c.Radius * c.Radius
	}

	func (c Circle) Perimeter() float64 {
		return 2 * math.Pi * c.Radius
	}

	func (c Circle) Diameter() float64 {
		return 2 * c.Radius
	}

	// Generic Function : Bisa menghitung luas area, untuk shape yg berbeda2
	func CalculateTotalArea(shapes ...Shape) float64 {
		totalArea := 0.0
		for _, s := range shapes {
			totalArea += s.Area()
		}
		return totalArea
	}

	// Interfaces can also be used as fields
	type MyDrawing struct {
		shapes  []Shape
		bgColor string
		fgColor string
	}

	func (drawing MyDrawing) Area() float64 {
		totalArea := 0.0
		for _, s := range drawing.shapes {
			totalArea += s.Area()
		}
		return totalArea
	}

	func main() {
		var s Shape = Circle{5.0}
		fmt.Printf("Type Shape = %T, Nilai Shape %v\n", s, s)
		fmt.Printf("Area = %f, Perimeter %f\n", s.Area(), s.Perimeter())

		var c Circle = Circle{5}
		fmt.Println(c.Diameter())

		s = Rectangle{6.0, 4.0}
		fmt.Printf("Type Shape = %T, Nilai Shape %v\n", s, s)
		fmt.Printf("Area = %f, Perimeter %f\n\n", s.Area(), s.Perimeter())

		totalArea := CalculateTotalArea(Circle{2}, Rectangle{4, 3}, Rectangle{6, 3})
		fmt.Println("Total Area = ", totalArea)

		drawing := MyDrawing{
			shapes: []Shape{
				Circle{2},
				Rectangle{3, 5},
				Rectangle{4, 7},
			},
			bgColor: "red",
			fgColor: "white",
		}

		fmt.Println("Drawing", drawing)
		fmt.Println("Drawing Area = ", drawing.Area())
	}

=== Packages and Modules ===

01. Buat folder di labs\07-packages
	- Aktifkan folder tersebut sebagai project folder

02. Buat file labs\07-packages\main.go
















